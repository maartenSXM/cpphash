# Makefile.cpptext is from https://github.com/maartenSXM/cpptext.
#
# This file is intended to be included from your project Makefile and
# depends on $(OUTDIR)/cpptext being a git clone of
# https://github.com/maartenSXM/cpptext.
#
# See https://github.com/maartenSXM/cpptext/blob/main/Makefile for
# an example of how to automatically clone this repo and include this file
# from a Makefile.
#
# Refer to https://github.com/maartenSXM/cpptext/blob/main/README.md
# for more details.

# These can be optionally overridden in a project Makefile that
# includes this Makefile.cpptext file. 

# set some defaults for unset user variables
MAIN	?= main.yaml
SUFFIX	?= $(suffix $(MAIN))
OUTDIR	?= .
PROJTAG	?= 0
PREFIX	?= myProj_
CPT_DIRS?= .
CPT_SRCS?= $(foreach d,$(CPT_DIRS),$(wildcard $(d)/*$(SUFFIX))) $(CPT_FILES)

PROJNAME:=$(PREFIX)$(PROJTAG)

# Use these overrides to specify dependicies that customize the build
PRE_TGT	 ?= 
POST_TGT ?= 
ifeq (,$(findstring esphome,$(VIRTUAL_ENV)))
MAIN_TGT ?= cppTgt
else
MAIN_TGT ?= esphomeTgt # from Makefile.esphome
endif

# Use these to specify dependicies that customize cleaning
EXTRA_CLEAN_TGT:= $(if $(EXTRA_CLEAN_TGT),$(EXTRA_CLEAN_TGT),)
EXTRA_REALCLEAN_TGT:= $(if $(EXTRA_REALCLEAN_TGT),$(EXTRA_REALCLEAN_TGT),)

ifeq ($(shell test -e $(MAIN) || echo -n no),no)
  $(error "$(MAIN): file not found.")
endif
ifeq ($(shell test -e $(OUTDIR) || echo -n no),no)
  $(error "$(OUTDIR): file not found.")
endif
ifeq ($(shell which gcc),)
  $(error "gcc: not found. Please install it")
endif
ifeq (,$(findstring GNU,$(shell sed --version)))
  $(error "GNU sed not found. Please install it")
endif

PROJDIR	:= $(OUTDIR)/$(PROJNAME)
DEHASH	:= $(OUTDIR)/cpptext/dehash.sh --cpp
OUTFILE	:= $(PROJDIR)$(SUFFIX)
OLDOUT:= $(dir $(OUTFILE))/.$(notdir $(OUTFILE)).old

CPPINCS = -I$(PROJDIR) -I. $(EXTRA_CPPINCS)
CPPDEFS = -D _PROJTAG_$(PROJTAG)=1 -D _USER_$(USER)=1 -D _PROJTAG=$(PROJTAG) -D _USER=$(USER) -D _PROJDIR=$(PROJDIR) $(EXTRA_CPPDEFS)
CPPFLAGS= -x c -E -P -undef -Wundef -Werror -nostdinc $(EXTRA_CPPFLAGS)
CPP	= gcc $(CPPFLAGS) $(CPPINCS) $(CPPDEFS) 

# PROJSRCS is the list of dehashed CPT_SRCS in PROJDIR
# filter-out drops builds artifacts in CPT_SRCS when, for example, OUTDIR = .
PROJSRCS = $(addprefix $(PROJDIR)/,$(filter-out $(wildcard $(OUTDIR)/$(PREFIX)*$(SUFFIX)),$(CPT_SRCS)))

# _DIRS is all build directories (sort filters duplicates)
_DIRS	:= $(sort $(dir $(OUTDIR) $(PROJDIR) $(PROJSRCS)))

$(shell mkdir -p $(_DIRS))

all: $(PRE_TGT) $(MAIN_TGT) $(POST_TGT) 

cppTgt: $(OUTFILE)
	@echo "$(OUTFILE) is up to date"

$(OUTFILE): $(PROJDIR)/$(MAIN) $(PROJSRCS)
	@if [ -f '$@' ]; then mv $@ $(OLDOUT); else touch $(OLDOUT); fi
	@printf "project srcs are $(PROJSRCS)"
	@printf "Generating $@ from dehashed files in $(PROJDIR)\n"
	$(CPP) -MD -MP -MT $@ -MF $<.d $< -o $@

$(PROJDIR)/%$(SUFFIX): %$(SUFFIX)
	@printf "Dehashing to $@\n"
	@$(DEHASH) $< > $@

$(PROJDIR)/%.cpp: %.cpp
	@printf "Dehashing to $@\n"
	@$(DEHASH) $< > $@

-include $(wildcard $(PROJDIR)/*.d)

clean: $(EXTRA_CLEAN_TGT)
	rm -rf $(PROJDIR) $(OUTFILE) $(OLDOUT) $(CLEAN_FILES)

realclean: clean $(EXTRA_REALCLEAN_TGT)
	-@if [ "`git -C cpptext status --porcelain`" != "" ]; then       \
		echo "Not removing cpptext since it has been modified."; \
	else								 \
		echo "rm -rf $(OUTDIR)/cpptext";			 \
		rm -rf $(OUTDIR)/cpptext;				 \
	fi
	rm -rf $(PROJDIR) $(REALCLEAN_FILES)

ifeq (,$(findstring esphome,$(VIRTUAL_ENV)))
  $(info Makefile.cpptext: deactivated Makefile.esphome.)
else
  ifeq (,$(CPPTEXT_NO_ESPHOME))
    $(info Makefile.cpptext: activated Makefile.cpptext and Makefile.esphome.)
    include $(OUTDIR)/cpptext/Makefile.esphome
  else
    # exclude Makefile.esphome by defining CPPTEXT_NO_ESPHOME Makefile that includes this
    $(info Makefile.cpptext: activate Makefile.cpptext included.)
  endif
endif

.PHONY:    all clean realclean mkdirs cppTgt $(PRE_TGT) $(MAIN_TGT) $(POST_TGT)
.PRECIOUS: $(PROJDIR) $(OUTDIR) $(OUTDIR)/cpptext

