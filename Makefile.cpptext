# Makefile.cpptext is from https://github.com/maartenSXM/cpptext.
#
# This file is intended to be included from your project Makefile and
# depends on $(CPT_HOME) being a git clone of github.com/maartenSXM/cpptext.
#
# See https://github.com/maartenSXM/cpptext/blob/main/Makefile for
# an example of how to automatically clone this repo and include this file
# from a Makefile.
#
# Refer to https://github.com/maartenSXM/cpptext/blob/main/README.md
# for more details.

MAKEFLAGS    += --no-builtin-rules
MAKEFLAGS    += --no-builtin-variables
MAKECMDGOALS ?= all

# These can be optionally overridden in a project Makefile that
# includes this Makefile.cpptext file. 

# set some defaults for unset user variables
CPT_HOME       ?= $(dir $(abspath $(lastword $(MAKEFILE_LIST))))
CPT_BUILD_DIR  ?= build
CPT_TMP_SUBDIR ?= .cpptext

# Use these overrides to specify dependencies that customize the build
CPT_PRE_TGT  ?= 
CPT_MAIN_TGT ?= cppTgt
CPT_POST_TGT ?= 

# automatically
ifeq (,$(findstring esphome,$(VIRTUAL_ENV)))
endif

# Use these to specify dependicies that customize cleaning.  This inializes them.
CPT_EXTRA_CLEAN_TGT    := $(if $(CPT_EXTRA_CLEAN_TGT),$(CPT_EXTRA_CLEAN_TGT),)
CPT_EXTRA_REALCLEAN_TGT:= $(if $(CPT_EXTRA_REALCLEAN_TGT),$(CPT_EXTRA_REALCLEAN_TGT),)

ifeq ($(CPT_SRCS),)
  $(error "set CPT_SRCS to the files you want to run dehash.sh on")
endif

ifeq ($(shell which gcc),)
  $(error "gcc not found. Please install it")
endif

ifeq (,$(findstring GNU,$(shell sed --version)))
  $(error "GNU sed not found. Please install it")
endif

ifeq ($(CPT_BUILD_DIR),.)
  $(error "CPT_BUILD_DIR is set to . not supported.")
endif

CPT_TMP_DIR  := $(CPT_BUILD_DIR)/$(CPT_TMP_SUBDIR)
CPT_DEHASH   := $(CPT_HOME)/dehash.sh --cpp
CPT_OUTFILES := $(addprefix $(CPT_BUILD_DIR)/,$(patsubst ./%,%,$(CPT_GEN)))
CPT_OLDOUTS  := $(foreach f,$(CPT_OUTFILES),$(dir $(f)).$(notdir $(f)).old)

CPT_CPPFLAGS := -x c -E -P -undef -Wundef -Werror -nostdinc $(CPT_EXTRA_FLAGS)
CPT_CPPINCS  := -I $(CPT_TMP_DIR) -I. $(CPT_EXTRA_INCS)
CPT_CPPDEFS  := -D CPT_USER_$(USER)=1	\
	        -D CPT_USER=$(USER)	\
		$(CPT_EXTRA_DEFS)
CPT_CPP	= gcc $(CPT_CPPFLAGS) $(CPT_CPPINCS) $(CPT_CPPDEFS) 

# CPT_TMP_SRCS is the list of dehashed files in CPT_TMP_DIR
CPT_TMP_SRCS = $(addprefix $(CPT_TMP_DIR)/,$(patsubst ./%,%,$(CPT_SRCS)))

# create all build directories (sort filters duplicates)
CPT_MKDIRS := $(sort $(dir $(CPT_BUILD_DIR) $(CPT_TMP_DIR) $(CPT_TMP_SRCS)))

$(shell mkdir -p $(CPT_MKDIRS))

# skip include of Makefile.esphome by defining CPT_NO_ESPHOME to non-empty
ifeq (,$(CPT_NO_ESPHOME))
  # include Makefile.esphome if an esphome virtual environment is active
  ifneq (,$(findstring esphome,$(VIRTUAL_ENV)))
    CPT_MAIN_TGT = esphomeTgt # from Makefile.esphome
    include $(CPT_HOME)/Makefile.esphome
  endif
endif

all: $(CPT_PRE_TGT) $(CPT_MAIN_TGT) $(CPT_POST_TGT) 

_nothing:=
_comma:=,
_space:=$(nothing) $(nothing)
cppTgt: $(CPT_SRCS) $(CPT_TMP_SRCS) $(CPT_OUTFILES)
	@printf "Makefile.cpptext: $(CPT_BUILD_DIR)/"
	@printf "{$(subst $(_space),$(_comma),$(notdir $(CPT_OUTFILES)))} "
	@printf "are up to date.\n"

$(CPT_SRCS):
	$(error source file $@ does not exist)

# emit the rules that run cpp to generate all the CPT_OUTFILES
define cpp_rule
$(CPT_BUILD_DIR)/$(1): $(CPT_TMP_DIR)/$(1) $(MAKEFILE_LIST)
	# @if [ -f $$@ ]; then mv $$@ $(2); else touch $(2); fi
	$(CPT_CPP) -MD -MP -MT $$@ -MF $$<.d $$< -o $$@
	$(CPT_CPP_MORE)
endef

# parameters are the file to generate and a name to use to backup it up
$(foreach src,$(patsubst ./%,%,$(CPT_GEN)), \
    $(eval $(call cpp_rule,$(src),$(CPT_BUILD_DIR)/.$(src).old)))

# Generate the rules that dehash the sources into the project directory
define dehash_rule
$(CPT_TMP_DIR)/$(1): $(1) $(MAKEFILE_LIST)
	@printf "Dehashing to $$@\n"
	@$(CPT_DEHASH) $$< >$$@
endef

$(foreach src,$(patsubst ./%,%,$(CPT_SRCS)),$(eval $(call dehash_rule,$(src))))

# include the dependency rules generated from a previous build, if any
-include $(wildcard $(CPT_TMP_DIR)/*.d)

clean: $(CPT_EXTRA_CLEAN_TGT)
	rm -rf $(CPT_TMP_DIR) $(CPT_OUTFILES) $(CPT_OLDOUTS) $(CPT_CLEAN_FILES)
	$(CPT_CLEAN_MORE)

realclean: clean $(CPT_EXTRA_REALCLEAN_TGT)
	-@if [ "`git -C $(CPT_HOME) status --porcelain`" != "" ]; then	\
		printf "$(CPT_HOME) not porcelain. Leaving it.\n";	\
	else								\
		printf "rm -rf $(CPT_HOME)\n";				\
		rm -rf $(CPT_HOME);					\
	fi
	rm -rf $(CPT_TMP_DIR) $(CPT_REALCLEAN_FILES)
	$(CPT_REALCLEAN_MORE)

.PRECIOUS: $(CPT_TMP_DIR) $(CPT_BUILD_DIR) $(CPT_HOME)
.PHONY: all clean realclean mkdirs cppTgt \
		    $(CPT_PRE_TGT) $(CPT_MAIN_TGT) $(CPT_POST_TGT)

