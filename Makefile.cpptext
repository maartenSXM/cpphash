# Makefile.cpptext is from https://github.com/maartenwrs/cpptext.
#
# This file is intended to be included from your project Makefile and
# depends on $(OUTDIR)/cpptext being a git clone 
# https://github.com/maartenwrs/cpptext.
#
# See https://github.com/maartenwrs/cpptext/blob/main/Makefile for
# an example of how to automatically clone this repo and include this file
# from a Makefile.
#
# Refer to https://github.com/maartenwrs/cpptext/blob/main/README.md
# for more details.

MAIN   := main.yaml
SUFFIX := $(suffix $(MAIN))

# The make rules below require the processed files to all have the same suffix.
#
# By default, process all files with the same suffix in case they are needed.
SRCS   := $(wildcard *$(SUFFIX))

ifeq ($(shell test -e $(MAIN) || echo -n no),no)
  $(error "$(MAIN): file not found.")
endif

OUTDIR	:= .
PROJTAG	:= 0
PREFIX	:= myProj_
PROJDIR	:= $(OUTDIR)/$(PREFIX)$(PROJTAG)
CPPINCS := -I$(PROJDIR) -I.
CPPDEFS := -D _PROJTAG_$(PROJTAG)=1 -D _USER_$(USER)=1

DEHASH	:= $(OUTDIR)/cpptext/dehash.sh --cpp
CPP	:= gcc -x c -E -P -undef -nostdinc $(CPPINCS) $(CPPDEFS) 

# _MAIN is the generated file (myProj_0.yaml by default)
_MAIN	:= $(PROJDIR)$(SUFFIX)


# _SRCS is $(SRCS) without generated files of the same PREFIX and SUFFIX
_SRCS	:= $(addprefix $(PROJDIR)/,$(filter-out $(wildcard $(PREFIX)*$(SUFFIX)),$(SRCS)))

# generate $(_MAIN) and optionally kickoff a subsequent build
all: $(OUTDIR)/cpptext $(PROJDIR) $(_SRCS) $(_MAIN)
	@echo "$(_MAIN) is up to date"
	$(BUILD)

$(_MAIN) $(_SRCS): $(OUTDIR)/cpptext Makefile

$(_MAIN): $(PROJDIR)/$(MAIN) $(_SRCS)
	@echo "Generating $@ from dehashed files in $(PROJDIR)/"
	$(CPP) -MD -MP -MT $@ -MF $<.d $< > $@

$(OUTDIR):
	-mkdir -p $@

$(PROJDIR):
	-mkdir -p $@

$(PROJDIR)/%$(SUFFIX): %$(SUFFIX)
	$(DEHASH) $< > $@

-include $(wildcard $(PROJDIR)/*.d)

clean:
	rm -rf $(PROJDIR) $(_MAIN)
	$(CLEAN)

realclean: clean
	rm -rf $(OUTDIR)/cpptext
	$(REALCLEAN)

.PHONY:    clean realclean update
.PRECIOUS: $(PROJDIR) $(OUTDIR) $(OUTDIR)/cpptext

# if generating an esphome project, we need to do some extra stuff
# mostly because esphome looks for secrets.yaml in the same directory
# as the esphome yaml file - which might be in $(OUTDIR) and not ".".
#
# Also, after generating the esphome yaml, it is handy to kick off the
# esphome compile.  Finally, the realclean target is extended to cleanup
# .esphome which gets created during the issued esphome compile.
#
ifneq (,$(findstring esphome,$(VIRTUAL_ENV)))

# setup secrets.yaml  to be in OUTDIR if needed and then kick-off a build
BUILD := -@if [ "$(OUTDIR)" != "." -a -f "secrets.yaml" ]; then 	   \
	    if [ -L "$(OUTDIR)/secrets.yaml" ]; then 			   \
	    	rm -f $(OUTDIR)/secrets.yaml;				   \
		echo "re-linking $(OUTDIR)/secrets.yaml";		   \
	    else							   \
		echo "linking $(OUTDIR)/secrets.yaml";			   \
	    fi;								   \
	    ln -s $(PREFIX)$(PROJTAG)/secrets.yaml $(OUTDIR)/secrets.yaml; \
	fi;								   \
	echo esphome compile $(_MAIN);					   \
	esphome compile $(_MAIN)

# target "clean" cleans up secrets.yaml from $(OUTDIR), if needed
CLEAN := @if [ "$(OUTDIR)" != "." -a -f "secrets.yaml" ]; then  \
	    if [ -L "$(OUTDIR)/secrets.yaml" ]; then 		\
	    	echo "rm $(OUTDIR)/secrets.yaml";		\
	    	rm -f $(OUTDIR)/secrets.yaml;			\
	    fi;							\
	fi

# target "realclean" cleans .esphome from $(OUTDIR)
REALCLEAN := rm -rf $(OUTDIR)/.esphome

endif
