# Makefile.cpptext is from https://github.com/maartensxm/cpptext.
#
# This file is intended to be included from your project Makefile and
# depends on $(OUTDIR)/cpptext being a git clone 
# https://github.com/maartensxm/cpptext.
#
# See https://github.com/maartensxm/cpptext/blob/main/Makefile for
# an example of how to automatically clone this repo and include this file
# from a Makefile.
#
# Refer to https://github.com/maartensxm/cpptext/blob/main/README.md
# for more details.

# conditionally set these so that they can be overridden in Makefile
# which might include this Makefile.cpptext file. That allows
# Makefile.cpp text to remain unchanged and more easily updated from
# the cpptext github repo.

MAIN	:= $(if $(MAIN),$(MAIN),main.yaml)
SUFFIX	:= $(if $(SUFFIX),$(SUFFIX),$(suffix $(MAIN)))
OUTDIR	:= $(if $(OUTDIR),$(OUTDIR),.)
PROJTAG	:= $(if $(PROJTAG),$(PROJTAG),0)
PREFIX	:= $(if $(PREFIX),$(PREFIX),myProj_)
SRCS	:= $(if $(SRCS),$(SRCS),$(wildcard *$(SUFFIX)))

ifeq ($(shell test -e $(MAIN) || echo -n no),no)
  $(error "$(MAIN): file not found.")
endif
ifeq ($(shell test -e $(OUTDIR) || echo -n no),no)
  $(error "$(OUTDIR): file not found.")
endif
ifeq ($(shell which gcc),)
  $(error "gcc: not found. Please install it")
endif
ifeq (,$(findstring GNU,$(shell sed --version)))
  $(error "GNU sed not found. Please install it")
endif

PROJDIR	:= $(OUTDIR)/$(PREFIX)$(PROJTAG)
CPPINCS := -I$(PROJDIR) -I.
CPPDEFS := -D _PROJTAG_$(PROJTAG)=1 -D _USER_$(USER)=1 -D _PROJTAG=$(PROJTAG) -D _USER=$(USER)

DEHASH	:= $(OUTDIR)/cpptext/dehash.sh --cpp
CPP	:= gcc -x c -E -P -undef -Wundef -Werror -nostdinc $(CPPINCS) $(CPPDEFS) 

# _MAIN is the generated file (./myProj_0.yaml by default)
_MAIN	:= $(PROJDIR)$(SUFFIX)

# PROJSRCS is the list of dehashed SRCS in PROJDIR
# (filter-out drops project files generated by previous builds)
PROJSRCS:= $(addprefix $(PROJDIR)/,$(filter-out $(wildcard $(PREFIX)*$(SUFFIX)),$(SRCS)))

# _DIRS is all build directories (sort filters duplicates)
_DIRS	:= $(OUTDIR) $(PROJDIR) $(sort $(dir $(PROJSRCS)))

# generate $(_MAIN) and optionally kickoff a subsequent build
all: mkdirs $(_MAIN)
	@echo "$(_MAIN) is up to date"
	$(BUILD)

mkdirs:
	-mkdir -p $(_DIRS)

$(_MAIN): $(PROJDIR)/$(MAIN) $(PROJSRCS)
	@echo "Generating $@ from dehashed files in $(PROJDIR)/"
	$(CPP) -MD -MP -MT $@ -MF $<.d $< > $@

$(PROJDIR)/%$(SUFFIX): %$(SUFFIX)
	$(DEHASH) $< > $@

-include $(wildcard $(PROJDIR)/*.d)

clean:
	rm -rf $(PROJDIR) $(_MAIN)
	$(CLEAN)

realclean: clean
	-@if [ "`git -C cpptext status --porcelain`" != "" ]; then       \
		echo "Not removing cpptext since it has been modified."; \
	else								 \
		echo "rm -rf $(OUTDIR)/cpptext";			 \
		rm -rf $(OUTDIR)/cpptext;				 \
	fi
	$(REALCLEAN)

.PHONY:    clean realclean update
.PRECIOUS: $(PROJDIR) $(OUTDIR) $(OUTDIR)/cpptext

