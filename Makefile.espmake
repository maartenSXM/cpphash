# Directory of this Makefile
_DIR := $(patsubst %/,%,$(dir $(abspath $(lastword $(MAKEFILE_LIST)))))

# This Makefile is from https://github.com/maartenSXM/cpphash

# It is esphome project independent since all esphome project
# configuration can be conditionally included from yaml that the
# generated final espmake.yaml can adapt at build time. There are
# a some C preprocessor defines that your espmake.yaml can use to do
# such # adaptation. See CPT_EXTRA_DEFS below.

# Refer to https://github.com/maartenSXM/cpphash/blob/main/README.md
# for more details.

# default ESPMAKE_HOME to this directory
ifeq (,$(ESPMAKE_HOME))
  ESPMAKE_HOME:=$(_DIR)
endif

MAKECMDGOALS ?= all
MAKE         := $(MAKE) ESPMAKE_HOME=$(ESPMAKE_HOME) --no-print-directory
MAKEFILE     := $(lastword $(MAKEFILE_LIST))

# Get cpphash when this Makefile has been copied out of cpphash
# *and* we are run from an example inside cpphash

ifeq (,$(wildcard cpphash/cpphash.mk)$(wildcard cpphash.mk))
  ifneq (,$(BAIL))
    $(error $(MAKEFILE): make loop detected. Bailing out.)
  endif

$(MAKECMDGOALS): 
	git clone https://github.com/maartenSXM/cpphash.git
	cd cpphash && git checkout main
	@printf "$(MAKEFILE): Restarting \"make $(MAKECMDGOALS)\"\n"
	@$(MAKE) BAIL=1 $(MAKECMDGOALS)
else

# The rest of this Makefile is inside the 'ifeq' cpphash check from above.

# Record each distint PRJ in .espmake_all
define _saveprj
  $(shell grep -sqxF $1 .espmake_all || echo $1 >> .espmake_all)
endef

# choose CPT_HOME from ./cpphash and .
CPT_HOME := $(patsubst %/,%, \
	    $(dir $(wildcard cpphash/cpphash.mk)$(wildcard ./cpphash.mk)))

# Check if PRJ= was specified on the command line to select a project.
ifneq (,$(PRJ))
  ifeq (,$(wildcard $(PRJ)))	    # check specified espmake project exists
    $(error $(MAKEFILE): $(PRJ) not found)
  endif
  $(shell echo $(PRJ) > .espmake_prj)
  $(call _saveprj,$(PRJ))
else
  ifneq (,$(wildcard .espmake_prj))
    PRJ := $(shell cat .espmake_prj)
  else
    $(info  $(MAKEFILE): Specifiy an esphome yaml file with PRJ=. Like this:)
    $(error $(MAKEFILE):   make PRJ=./esphome.yaml)
  endif
endif

ifeq (,$(wildcard $(PRJ))) # check specified initial file exists
    $(info $(MAKEFILE): $(PRJ) not found.)
    $(error $(MAKEFILE): Perhaps run this in the example directory?)
endif

# set the variable that cpphash/cpphash.mk uses
ESP_INIT = $(PRJ)

ESPMAKE_PRJ_PATH = $(PRJ)
ESPMAKE_PRJ_DIR  = $(patsubst %/,%,$(dir $(PRJ)))
ESPMAKE_PROJECT  = $(basename $(notdir $(ESPMAKE_PRJ_PATH)))

ifeq (,$(wildcard build/$(ESPMAKE_PROJECT)))
  $(shell mkdir -p build/$(ESPMAKE_PROJECT))
endif

# CPT_BUILD_DIR is where ESPMAKE projects are built. If changed, review
# the definition of ESPMAKE_TOP below.  It declares the relative path to
# ESPMAKE_HOME from CPT_BUILD_DIR. This is done manually because realpath
# does not support the --relative-to option on many non-Linux OSs.

CPT_BUILD_DIR = ./build/$(ESPMAKE_PROJECT))
ESPMAKE_BUILD_LOG = $(CPT_BUILD_DIR)/makeall.log

# restart 'make all' with logging to $(CPT_BUILD_DIR)/build.log and console
ifeq (all,$(ESPMAKE_AUTOLOG)$(MAKECMDGOALS))
  SHELL:=bash
all:
	@$(MAKE) -k ESPMAKE_AUTOLOG=1 $(MAKECMDGOALS) |& \
		tee $(ESPMAKE_BUILD_LOG)
	@printf "Makefile: \"make all\" log is $(ESPMAKE_BUILD_LOG)\n"
else

# CPT_GEN is the set of files that cpphash runs the C preprocessor on.
# They can include files from CPT_SRCS (defined below) since the cpphash
# tool arranges that de-commented copies are included, not the originals.

# CPT_GEN  ?= partitions.csv lily.yaml
CPT_GEN  ?= $(ESP_INIT)

# if there is a secrets.yaml beside $(ESP_INIT), run it through cpp too
ifneq (,$(wildcard $(dir $(ESP_INIT))secrets.yaml))
  CPT_GEN += $(dir $(ESP_INIT))secrets.yaml
endif

# Use this to list subdirectories to #include yaml files from.
ESPMAKE_DIRS ?= 

# CPT_SRCS is the set of files that cpphash will remove hash-style
# comments from while leaving any C preprocessor directives so that
# the file can subsequently be used as a #include by one of the
# CPT_GEN files.

# Builds the list of CPT_SRCS by looking for .yaml files in $(ESPMAKE_DIRS).

CPT_SRCS += $(sort $(foreach d,$(ESPMAKE_DIRS),$(wildcard $(d)/*.yaml)) $(CPT_GEN))

# In addition to updates to $(CPT_SRCS) triggering a rebuild of espmake.yaml,
# updates to source files in $(ESP_DEPS) are also triggers.

ESPMAKE_DEPS ?= 

ESP_DEPS += $(foreach d,$(ESPMAKE_DEPS),$(wildcard $(d)/*.c) \
		$(wildcard $(d)/*.cpp) $(wildcard $(d)/*.h))

# If there is a secrets.h file in ./ or ../, use it

ifneq (,$(wildcard ./secrets.h))
  CPT_EXTRA_FLAGS += -include ./secrets.h
else
  ifneq (,$(wildcard ../secrets.h))
    CPT_EXTRA_FLAGS += -include ../secrets.h
  endif
endif

# Use this to list additional #include directories

# Allow #include from all source directories.  Note these
# directories come after -I build/<project>/dehashed so
# includes of yaml files are taken from there.

CPT_EXTRA_INCS += $(foreach d,$(ESPMAKE_DIRS),-I $(d))

# These #defines are for project adapation. 

# Also ESPMAKE_TOP is how to get from the build directory back to
# ESPMAKE_HOME. It is ESPMAKE_HOME relative from CPT_BUILD_DIR.

CPT_EXTRA_DEFS += -D ESPMAKE_HOME=$(ESPMAKE_HOME)		\
		  -D ESPMAKE_TOP=../..				\
		  -D ESPMAKE_BUILD_PATH=$(CPT_BUILD_DIR)	\
		  -D ESPMAKE_PRJ_DIR=$(ESPMAKE_PRJ_DIR)		\
		  -D ESPMAKE_PROJECT_NAME=$(ESPMAKE_PROJECT)	\
		  -D ESPMAKE_PROJECT_$(ESPMAKE_PROJECT)		\
		  -D ESPMAKE_USER_NAME=$(USER)			\
		  -D ESPMAKE_USER_$(USER)

# This includes the cpphash Makefile fragment that will dehash yamls files.
# In turn, it will include cpphash/esphome.mk which handles the esphome
# file generation and platformio build steps.

include $(CPT_HOME)/cpphash.mk

print-config:: $(ESP_INIT)
	@printf "Makefile variables as processed by cpphash:\n"
	@printf "  ESPMAKE_PROJECT: $(ESPMAKE_PROJECT)\n"
	@printf "  ESP_INIT: $(ESP_INIT)\n"
	@printf "  CPT_GEN:  $(CPT_GEN)\n"
	@printf "  CPT_SRCS:\n"
	@$(foreach f,$(CPT_INFILES),printf "    $(f)\n";)
	@printf "  ESP_DEPS:\n"
	@$(foreach f,$(ESP_DEPS),printf "    $(f)\n";)
	@printf "Makefile #defines available to yaml files:"
	@printf "  $(subst -, ,$(subst -D,#define,$(CPT_EXTRA_DEFS)))\n" | sed -e 's/ #/\n  #/g' -e 's/=/ /g'
	@printf "For #defaults available to yaml files, "
	@printf "use: make print-defaults\n"

.PHONY: print-config

# this endif is from the autolog restart
endif

# This last endif is needed from the git submodule install check above

endif
