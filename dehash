#!/bin/bash

VERBOSE=0
CLEAN=0
OUTDIR=./.dehash
GCC="gcc -x c -C -undef -nostdinc -E -P -Wno-endif-labels -"
HELP="$0 removes '#'-style comments\n-c|--cpp\tkeep CPP directives\n-b|--blank\tkeep blank lines\n-o|--outdir\toutput dir (\"-o -\" for stdout)\n-C|--clean\tclean output dir\n-v|--verbose\tverbose mode\n-h|--help\thelp"

while [[ $# > 0 ]]
do
  case $1 in
    -c|--cpp) GCCFLAGS="$GCCFLAGS -DCPP"; shift;;
    -o|--outdir) shift; OUTDIR="$1"; shift;; 
    -C|--clean) CLEAN=1; shift;; 
    -b|--blank) GCCFLAGS="$GCCFLAGS -DBLANK"; shift;; 
    -v|--verbose) VERBOSE=1; shift;; 
    -h|--help) echo -e "$HELP"; shift;; 
    *) break
  esac
done

if [ $CLEAN == 1 ]; then
  if [ $VERBOSE == 1 ]; then
    echo rm -rf $OUTDIR
  fi
  rm -rf $OUTDIR
fi

for file in "$@"
do
  if [ $OUTDIR != "-" ]; then
    OUTFILE=$OUTDIR/$file
    # create any $OUTDIR path including $file subdirectories
    if [ $VERBOSE == 1 ]; then
      echo mkdir -p $OUTDIR/`dirname $file`
    fi
    mkdir -p $OUTDIR/`dirname $file`
    if [ $VERBOSE == 1 ]; then
      echo "Creating $OUTFILE"
    fi
  else
    OUTFILE=/dev/stdout
  fi
  
  # The following sed script is based on https://unix.stackexchange.com/questions/383960/sed-stripping-comments-inline/766997#766997

  # q=quote, Q=doubleQuote, d=dollarSign
  q=\\x27 Q=\\x22 d=\\x24
  # b=backslash, B=doubleBackslash, e=exclamationMark
  b=\\x5c B=\\x5c\\x5c e=\\x21

  # construct regexes using symbolic names
  single_quotes_open="$q[^$b$q]*($B.[^$b$q]*)*$d"
  single_quoted_word="$q[^$b$q]*($B.[^$b$q]*)*$q"
  double_quotes_open="$Q[^$b$Q]*($B.[^$b$Q]*)*$d"
  double_quoted_word="$Q[^$b$Q]*($B.[^$b$Q]*)*$Q"
  quoted_word="$double_quoted_word|$single_quoted_word"

  echo '
  #ifndef CPP
    # // if not planning to run output through cpp, line 1 shebang can stay
    1 {/^#!/p}
  #else // CPP
    # // else change it to cpp directives that generate a shebang.
    # // note cpp must have -P -nostdinc -traditional-cpp flags
    1 {s,^#!(.*)$,#define __SHEBANG_ #!\n__SHEBANG_\1,}
    # // keep cpp directive lines (b=branch next line)
    /^\s*#\s*\(assert\s|define\s|elif\s|else|endif|error|ident\s|if\s|ifdef\s|ifndef\s|import\s|include\s|include_next\s|line\s|pragma\s|sccs\s|unassert\s|undef\s|warning\)/b
  #endif // CPP
  #
  # // delete lines starting with #
  /^[\t\ ]*#/d

  #ifndef BLANK
    # // delete blank lines
    /\S/!d
  #endif // !BLANK
  '"
  /(^|\s)$double_quotes_open/{:a;N;ba;}
  /(^|\s)$single_quotes_open/{:b;N;bb;}
  /$B$d/{:c;N;bc;}
  s,\s*#.*|($quoted_word|.|$b$d#|$B#),\1,g
  "'
  #ifndef BLANK
    # // delete blank lines
    /\S/!d
  #endif // !BLANK
  ' | $GCC $GCCFLAGS | sed -E -f - $file >$OUTFILE
done
    
exit 0
