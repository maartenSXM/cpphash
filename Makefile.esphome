# This makefile attempts to regenerate esphome firmare based on
# generated file contents, not just based on timestamps.  
# It will skip esphome yaml generation when the yaml generated
# by cpptext is unchanged from a previous build.  In addition,
# It will skip running platformio to build the source generated 
# by esphome if the generated main.cpp is the same as the previous
# build.

# The including Makefile should include Makefile.cpptext,
# which in turn includes this file, Makefile.esphome

# The including Makefile should define ESP_INIT to an
# output of Makefile.cpptext (i.e. it is one of the generated
# files listed in CPT_GEN.

# The including Makefile should also define ESP_YAML to
# the name of the yaml file that this Makefile fragment should
# generate using yamlmerge.sh, for processing by esphome and
# platformio.

ifeq ($(shell which yq),)
$(error "yq not found. Please install it")
endif

ESP_PRJYAML := $(CPT_BUILD_DIR)/$(ESP_INIT)
ESP_OLDYAML := $(dir $(ESP_PRJYAML)).$(notdir $(ESP_PRJYAML)).old
ESP_MERGED  := $(CPT_BUILD_DIR)/$(ESP_YAML)

# If this is a first time build attempt, initiate a full build

ifeq (,$(wildcard $(ESP_MERGED)))
esphomeTgt: cppTgt 
	@printf "Makefile.esphome: initiating full build of $(ESP_PRJYAML)\n"
	$(CPT_HOME)/yamlmerge.sh -o $(ESP_MERGED) $(ESP_PRJYAML)
	@printf "esphome compile $(notdir $(ESP_MERGED))\n"
	@cd $(dir $(ESP_PRJYAML)) &&				\
	    esphome compile $(notdir $(ESP_MERGED)) &&		\
	    printf "Makefile.esphome: $(CPT_BUILD_DIR) " &&	\
	    printf "firmware.elf is up to date.\n"
else

# Extract the platformio project name from the generated yaml 
# Note if the .esphome.name is changed, a make clean is needed.

ESP_NAME := $(shell yq -r --no-doc .esphome.name $(ESP_MERGED) | grep -v null)

ESP_DIR	      := $(CPT_BUILD_DIR)
ESP_PIOSUBDIR := .esphome/build/$(ESP_NAME)
ESP_PIODIR    := $(CPT_BUILD_DIR)/$(ESP_PIOSUBDIR)
ESP_ELFDIR    := $(ESP_PIODIR)/.pioenvs/$(ESP_NAME)
ESP_FIRMWARE  := $(ESP_ELFDIR)/firmware.elf
ESP_MAIN      := $(ESP_PIODIR)/src/main.cpp
ESP_OLDESP    := $(ESP_PIODIR)/src/.main.cpp.old
ESP_GEN	      := esphome compile --only-generate

# backed up build files don't exist after the initial build. Create them.

ifeq (,$(wildcard $(ESP_OLDYAML)))
  ifneq (,$(wildcard $(ESP_PRJYAML)))
    $(info $$(shell cp -p "$(ESP_PRJYAML)" "$(ESP_OLDYAML)"))
    $(shell cp -p "$(ESP_PRJYAML)" "$(ESP_OLDYAML)")
  endif
endif

ifeq (,$(wildcard $(ESP_OLDESP)))
  ifneq (,$(wildcard $(ESP_MAIN)))
    $(info $$(shell cp -p $(ESP_MAIN) $(ESP_OLDESP)))
    $(shell cp -p $(ESP_MAIN) $(ESP_OLDESP))
  endif
endif

esphomeTgt: cppTgt $(ESP_FIRMWARE)
	@if [ $(ESP_FIRMWARE) -nt $(ESP_MAIN) ]; then			\
	   printf "Makefile.esphome: $(ESP_NAME)...";			\
	   printf "$(notdir $(ESP_FIRMWARE)) is up to date.\n";		\
	fi

# Skip firmware build if main.cpp is newer than firmware but unchanged

$(ESP_FIRMWARE): $(ESP_MAIN)
	@cmp --silent $(ESP_OLDESP) $(ESP_MAIN); status=$$?;		\
	if [ $$status -eq 0 -a -f $(ESP_FIRMWARE) ]; then		\
            printf "Makefile.esphome: $(CPT_BUILD_DIR)...";		\
	    printf "$(ESP_NAME)...main.cpp is up to date\n";		\
	    touch -r $(ESP_OLDESP) $(ESP_MAIN);				\
        else								\
            printf "Makefile.esphome: $(ESP_MAIN) changed\n";		\
	    printf "Makefile.esphome: Building $(ESP_FIRMWARE)\n";	\
	    printf "esphome compile $(notdir $(ESP_MERGED))\n";		\
	    cd $(dir $(ESP_PRJYAML));	 				\
	    esphome compile $(notdir $(ESP_MERGED)); status=$$?;	\
	    cd - >/dev/null;						\
	    if [ $$status -eq 0 ]; then					\
	       cp -p $(ESP_MAIN) $(ESP_OLDESP);				\
	    fi;								\
	fi

# Run esphome if one of the project's trigger dependencies was updated.

$(ESP_MAIN):: $(ESP_DEPS) $(CPT_HOME)/Makefile.esphome
	@printf "Makefile.esphome: Dependency $? changed.\n"
	@printf "Makefile.esphome: Generating $(ESP_MAIN)\n"
	$(CPT_HOME)/yamlmerge.sh -o $(ESP_MERGED) $(ESP_PRJYAML)
	@cd $(dir $(ESP_MERGED));				    \
	    $(ESP_GEN) $(notdir $(ESP_MERGED)); status=$$?;	    \
	    cd - >/dev/null;					    \
	    if [ $$status -eq 0 ]; then				    \
	        cp -p $(ESP_PRJYAML) $(ESP_OLDYAML);		    \
	    fi
    
# Skip the esphome compile if the main yaml file contents didn't change.

$(ESP_MAIN):: $(ESP_PRJYAML) 
	$(ESP_BUILD_MORE)
	@cmp --silent "$(ESP_OLDYAML)" "$(ESP_PRJYAML)"; status=$$?;	\
	if [ $$status -eq 0 ]; then					\
            printf "Makefile.esphome: $(ESP_PRJYAML) unchanged. Done.\n";\
	    touch -r "$(ESP_OLDYAML)" "$(ESP_PRJYAML)";			\
        else								\
            printf "Makefile.esphome: $(ESP_PRJYAML) changed.\n";	\
	    printf "Makefile.esphome: Generating $(ESP_MAIN)\n";	\
	    $(CPT_HOME)/yamlmerge.sh -o "$(ESP_MERGED)" "$(ESP_PRJYAML)";\
	    printf "$(ESP_GEN) $(notdir $(ESP_MERGED))\n";		\
	    cd $(dir $(ESP_MERGED));				    \
	    $(ESP_GEN) $(notdir $(ESP_MERGED)); status=$$?;	    \
	    cd - >/dev/null;					    \
	    if [ $$status -eq 0 ]; then					\
	        cp -p "$(ESP_PRJYAML)" "$(ESP_OLDYAML)";		\
	    fi;								\
	fi
endif

# When generating an esphome project, we need to do some extra stuff
# for secrets.yaml since esphome expects it to be in the same directory
# as the esphome yaml file.  That is, in $(CPT_BUILD_DIR). So 
# the build and clean targets are extended to handle that.

define ESP_BUILD_MORE
	@if [ "$(CPT_BUILD_DIR)" != "." -a -f "secrets.yaml" ]; then	    \
	  if [ -L "$(CPT_BUILD_DIR)/secrets.yaml" ]; then		    \
	    rm -f $(CPT_BUILD_DIR)/secrets.yaml;			    \
	  fi;								    \
	  echo "Makefile.esphome: linking $(CPT_BUILD_DIR)/secrets.yaml";   \
	  ln -s secrets.yaml $(CPT_BUILD_DIR)/secrets.yaml;		    \
	fi
endef

# setup Makefile.cpptext target "clean" to remove secrets.yaml if needed

define CPT_CLEAN_MORE
	rm -f $(ESP_MERGED)
	@if [ "$(CPT_BUILD_DIR)" != "." -a -f "secrets.yaml" ]; then	\
	  if [ -L "$(CPT_BUILD_DIR)/secrets.yaml" ]; then		\
	    echo "rm $(CPT_BUILD_DIR)/secrets.yaml";			\
	    rm -f $(CPT_BUILD_DIR)/secrets.yaml;			\
	  fi;								\
	fi
endef

define print_defaults_rule
print-defaults:: cppTgt $(CPT_TMP_DIR)/$(1)
	@printf "Default values for $(1)\n"
	@$(CPT_CPP) -CC $(CPT_TMP_DIR)/$(1) |		\
		grep '^//#default' | sed 's/^../  /'
endef

$(foreach gen,$(patsubst ./%,%,$(CPT_GEN)),		\
    $(eval $(call print_defaults_rule,$(gen))))

# target "realclean" cleans .esphome from $(CPT_BUILD_DIR)

CPT_REALCLEAN_MORE := rm -rf $(CPT_BUILD_DIR)/.esphome $(CPT_BUILD_DIR)/.gitignore

.PHONY: esphomeTgt print-defaults
.PRECIOUS: $(ESP_FIRMWARE) $(ESP_MAIN)

