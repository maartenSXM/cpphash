# This makefile attempts to regenerate esphome firmare based on
# generated file contents, not just based on timestamps.  
# It will skip esphome yaml generation when the yaml generated
# by cpptext is unchanged from a previous build.  In addition,
# It will skip running platformio to build the source generated 
# by esphome if the generated main.cpp is the same as the previous
# build.

# The including Makefile should include Makefile.cpptext,
# which in turn includes this file, Makefile.esphome

# The including Makefile should define CPT_ESP_INIT to an
# output of Makefile.cpptext (i.e. it is one of the generated
# files listed in CPT_GEN.

# The including Makefile should also define CPT_ESP_YAML to
# the name of the yaml file that this Makefile fragment should
# generate using yamlmerge.sh, for processing by esphome and
# platformio.

ifeq ($(shell which yq),)
$(error "yq not found. Please install it")
endif

ESP_PRJYAML := $(CPT_BUILD_DIR)/$(CPT_ESP_INIT)
ESP_OLDYAML := $(dir $(ESP_PRJYAML)).$(notdir $(ESP_PRJYAML)).old
ESP_MERGED  := $(CPT_BUILD_DIR)/$(CPT_ESP_YAML)

# If this is a first time build attempt, initiate a full build

ifeq (,$(wildcard $(ESP_MERGED)))
esphomeTgt: cppTgt 
	@printf "Makefile.esphome: initiating full build of $(ESP_PRJYAML)\n"
	$(CPT_HOME)/yamlmerge.sh -o $(ESP_MERGED) $(ESP_PRJYAML)
	cd $(dir $(ESP_PRJYAML)) && esphome compile $(notdir $(ESP_MERGED))
	@printf "Makefile.esphome: $(CPT_BUILD_DIR) "
	@printf "firmware.elf is up to date.\n"

else

# Extract the platformio project name from the generated yaml 
# Note if the .esphome.name is changed, a make clean is needed.

CPT_ESP_NAME	  := $(shell yq -r --no-doc .esphome.name $(ESP_MERGED) \
		     | grep -v null)

CPT_ESP_DIR	  := $(CPT_BUILD_DIR)
CPT_ESP_PIOSUBDIR := .esphome/build/$(CPT_ESP_NAME)
CPT_ESP_PIODIR	  := $(CPT_BUILD_DIR)/$(CPT_ESP_PIOSUBDIR)
CPT_ESP_ELFDIR    := $(CPT_ESP_PIODIR)/.pio/build/$(CPT_ESP_NAME)
CPT_ESP_FIRMWARE  := $(CPT_ESP_ELFDIR)/firmware.elf
CPT_ESP_MAIN	  := $(CPT_ESP_PIODIR)/src/main.cpp
CPT_ESP_OLDESP	  := $(CPT_ESP_PIODIR)/src/.main.cpp.old
CPT_ESP_GEN	  := esphome compile --only-generate

# backed up build files don't exist after the initial build. Create them.

ifeq (,$(wildcard $(CPT_ESP_OLDYAML)))
  ifneq (,$(wildcard $(CPT_PRJYAML)))
    $(info $$(shell cp -p $(ESP_PRJYAML) $(ESP_OLDYAML)))
    $(shell cp -p $(ESP_PRJYAML) $(ESP_OLDYAML))
  endif
endif

ifeq (,$(wildcard $(CPT_ESP_OLDESP)))
  ifneq (,$(wildcard $(CPT_ESP_MAIN)))
    $(info $$(shell cp -p $(CPT_ESP_MAIN) $(CPT_ESP_OLDESP)))
    $(shell cp -p $(CPT_ESP_MAIN) $(CPT_ESP_OLDESP))
  endif
endif

esphomeTgt: cppTgt $(CPT_ESP_FIRMWARE)
	@printf "Makefile.esphome: $(CPT_BUILD_DIR)...$(CPT_ESP_NAME)..."
	@printf "$(notdir $(CPT_ESP_FIRMWARE)) is up to date.\n"

# Skip firmware build if main.cpp is newer than firmware but unchanged

$(CPT_ESP_FIRMWARE): $(CPT_ESP_MAIN)
	@cmp --silent $(CPT_ESP_OLDESP) $(CPT_ESP_MAIN);	    \
	if [ $$? -eq 0 ]; then					    \
            printf "Makefile.esphome: $(CPT_BUILD_DIR)...";	    \
	    printf "$(CPT_ESP_NAME)...main.cpp is up to date\n";	    \
	    touch -r $(CPT_ESP_OLDESP) $(CPT_ESP_MAIN);		    \
        else							    \
            printf "Makefile.esphome: $(CPT_ESP_MAIN) ";	    \
	    printf "changed. Building firmware.\n";		    \
	    printf "cd $(CPT_ESP_DIR); ";			    \
	    printf "pio run -d $(CPT_ESP_PIOSUBDIR)\n";		    \
	    cd $(CPT_ESP_DIR);					    \
		pio run -d $(CPT_ESP_PIOSUBDIR);		    \
	    cd -;						    \
	    cp -p $(CPT_ESP_MAIN) $(CPT_ESP_OLDESP);		    \
	fi

# Run esphome if one of the project's trigger dependencies was updated.

$(CPT_ESP_MAIN):: $(CPT_ESP_DEPS) $(CPT_HOME)/Makefile.esphome
	@printf "Makefile.esphome: Dependency changed. "
	@printf "Generating $(CPT_ESP_MAIN)\n"
	$(CPT_HOME)/yamlmerge.sh -o $(ESP_MERGED) $(ESP_PRJYAML)
	cd $(dir $(ESP_MERGED)) && $(CPT_ESP_GEN) $(notdir $(ESP_MERGED))
	@cp -p $(ESP_PRJYAML) $(ESP_OLDYAML)
    
# Skip the esphome compile if the main yaml file contents didn't change.

$(CPT_ESP_MAIN):: $(ESP_PRJYAML) 
	$(CPT_ESP_BUILD_MORE)
	@cmp --silent $(ESP_OLDYAML) $(ESP_PRJYAML);		    \
	if [ $$? -eq 0 ]; then					    \
            printf "Makefile.esphome: $(ESP_PRJYAML) unchanged. ";  \
	    printf "Done.\n";					    \
	    touch -r $(ESP_OLDYAML) $(ESP_PRJYAML);		    \
        else							    \
            printf "Makefile.esphome: $(ESP_PRJYAML) changed. ";    \
	    @printf "Generating $(CPT_ESP_MAIN)\n";		    \
	    $(CPT_HOME)/yamlmerge.sh -o $(ESP_MERGED) $(ESP_PRJYAML);\
	    printf "cd $(dir $(ESP_PRJYAML))";			    \
	    printf "$(CPT_ESP_GEN) $(notdir $(ESP_MERGED))\n";	    \
	    cd $(dir $(ESP_MERGED));				    \
		$(CPT_ESP_GEN) $(notdir $(ESP_MERGED));		    \
	    cd -;						    \
	    cp -p $(ESP_PRJYAML) $(ESP_OLDYAML);		    \
	fi
endif

# When generating an esphome project, we need to do some extra stuff
# for secrets.yaml since esphome expects it to be in the same directory
# as the esphome yaml file.  That is, in $(CPT_BUILD_DIR). So 
# the build and clean targets are extended to handle that.

define CPT_ESP_BUILD_MORE
	@if [ "$(CPT_BUILD_DIR)" != "." -a -f "secrets.yaml" ]; then	    \
	  if [ -L "$(CPT_BUILD_DIR)/secrets.yaml" ]; then		    \
	    rm -f $(CPT_BUILD_DIR)/secrets.yaml;			    \
	  fi;								    \
	  echo "Makefile.esphome: linking $(CPT_BUILD_DIR)/secrets.yaml";   \
	  ln -s secrets.yaml $(CPT_BUILD_DIR)/secrets.yaml;		    \
	fi
endef

# setup Makefile.cpptext target "clean" to remove secrets.yaml if needed

define CPT_CLEAN_MORE
	rm -f $(ESP_MERGED)
	@if [ "$(CPT_BUILD_DIR)" != "." -a -f "secrets.yaml" ]; then \
	  if [ -L "$(CPT_BUILD_DIR)/secrets.yaml" ]; then		\
	    echo "rm $(CPT_BUILD_DIR)/secrets.yaml";		\
	    rm -f $(CPT_BUILD_DIR)/secrets.yaml;			\
	  fi;							\
	fi
endef

define print_defaults_rule
print-defaults::
	@printf "Default values for $(1)\n"
	@$(CPT_CPP) -CC $(CPT_TMP_DIR)/$(1) | \
		grep '^//#default' | sed 's/^../  /'
endef

$(foreach gen,$(patsubst ./%,%,$(CPT_GEN)), \
    $(eval $(call print_defaults_rule,$(gen))))

# target "realclean" cleans .esphome from $(CPT_BUILD_DIR)

CPT_REALCLEAN_MORE := rm -rf $(CPT_BUILD_DIR)/.esphome $(CPT_BUILD_DIR)/.gitignore

.PHONY: esphomeTgt
.PRECIOUS: $(CPT_ESP_FIRMWARE) $(CPT_ESP_MAIN)
