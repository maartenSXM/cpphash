# This makefile attempts to regenerate esphome firmare based on
# generated file contents, not just based on timestamps.  
# It will skip esphome yaml generation when the yaml generated
# by cpptext is unchanged from a previous build.  In addition,
# it will skip esphome compile step to generate and build esphome
# sources if esphome.yaml doesn't change.

# The including Makefile should include Makefile.cpptext,
# which in turn includes this file, Makefile.esphome automatically
# when the shell is running in an esphome venv.

# The including Makefile can define ESP_INIT to an
# output of Makefile.cpptext (i.e. it is one of the generated
# files listed in CPT_GEN)  The default for ESP_INIT is "espinit.yaml".

# The including Makefile can define ESP_YAML to the name of the yaml
# file that this Makefile fragment should generate using yamlmerge.sh,
# for processing by esphome. The default for ESP_YAML is "esphome.yaml".

# This Makefile considers changes to the contents of files in addition to
# timestamps to trigger actions.  This can eliminate unecessary builds.
# The approach take is to only update an .md5 file when the checksum of
# its corresponding file changes. Some rule trigger builds by considering
# the timestamp on the md5 file rather than it's corresponding file.  This
# allows files to have newer or older timestamps than the md5 files as long
# as the file contents are the same as when the md5 file as created.

# "make clean" removes the md5 files to enable a subsequent full esphome
# build. "make realclean" removes the entire build directory. Use it with
# caution if you store non-build artifacts in the build directory.

SHELL=/bin/bash

ifeq ($(shell which md5sum),)
  $(error "md5sum not found. Please install it")
endif

ESP_INIT      ?= espinit.yaml
ESP_YAML      ?= esphome.yaml
ESP_BLDYAML   := $(CPT_BUILD_DIR)/$(ESP_INIT)
ESP_GENYAML   := $(CPT_BUILD_DIR)/$(ESP_YAML)
ESP_YAMLMERGE := $(CPT_HOME)/yamlmerge.sh -s -e

.SUFFIXES: .md5
.PHONY: all

# adds .md5 suffix to file names and record them for "make clean"
md5 = $(addsuffix .md5,$1)$(eval ESP_MD5FILES += $(addsuffix .md5,$1))

# The md5 is calculated and stashed in CHECKSUM. If the  existing .md5
# file doesn't exist or its stored md5 is different, then CHECKSUM is
# placed in the .md5 file, which updates its timestamp.

%.md5: %
	@$(eval CHECKSUM := $(shell md5sum "$*"))			\
	  $(if $(filter-out $(shell cat "$@" 2>/dev/null),$(CHECKSUM)),	\
	    echo $(CHECKSUM) > "$@")

esphomeTgt: cppTgt $(ESP_GENYAML)

# The file contents, not timestamps, are used as dependencies in this rule.
$(ESP_GENYAML): $(call md5,$(ESP_BLDYAML) $(ESP_DEPS))
	@printf "Makefile.esphome: $(<F:.md5=) changed.\n"
	$(ESP_YAMLMERGE) -o "$@" "$(<:.md5=)"
	cd "$(@D)" && esphome compile "$(@F)"
	
# When generating an esphome project, we need to do some extra stuff
# for secrets.yaml since esphome expects it to be in the same directory
# as the esphome yaml file.  That is, in $(CPT_BUILD_DIR). So 
# the build and clean targets are extended to handle that.

define ESP_BUILD_MORE
	@if [ "$(CPT_BUILD_DIR)" != "." -a -f "secrets.yaml" ]; then	    \
	  if [ -L "$(CPT_BUILD_DIR)/secrets.yaml" ]; then		    \
	    rm -f $(CPT_BUILD_DIR)/secrets.yaml;			    \
	  fi;								    \
	  echo "Makefile.esphome: linking $(CPT_BUILD_DIR)/secrets.yaml";   \
	  ln -s secrets.yaml $(CPT_BUILD_DIR)/secrets.yaml;		    \
	fi
endef

define CPT_CLEAN_MORE
	xargs rm -f $(ESP_GENYAML) $(sort $(ESP_MD5FILES))
	@if [ "$(CPT_BUILD_DIR)" != "." -a -f "secrets.yaml" ]; then	\
	  if [ -L "$(CPT_BUILD_DIR)/secrets.yaml" ]; then		\
	    echo "rm $(CPT_BUILD_DIR)/secrets.yaml";			\
	    rm -f $(CPT_BUILD_DIR)/secrets.yaml;			\
	  fi;								\
	fi
endef

# In addition to executing a "make clean", "make realclean"
# additionally cleans the builds .esphome directory and its log files

CPT_REALCLEAN_MORE := rm -rf $(CPT_BUILD_DIR)/.esphome $(CPT_BUILD_DIR)/*.log

.PHONY: esphomeTgt espBuild

