# Directory of this Makefile
MY_DIR := $(patsubst %/,%,$(dir $(abspath $(lastword $(MAKEFILE_LIST)))))

# This Makefile is from https://github.com/maartenSXM/cpphash

# Copy it to an esphome project directory to enable that esphome
# yaml to be processed by the C pre-processor. It can be run
# using make -f Makefile.esphome.  Alternatively, it can be renamed
# Makefile to avoid having to specify the the -f option.

# There are some pre-defined C pre-processor defines that your
# esphome yaml can use with #ifdef etc. See CH_EXTRA_DEFS below.

# Refer to https://github.com/maartenSXM/cpphash/blob/main/README.md
# for more details.

# To setup cpphash for one esphome project, copy it into the esphome project
# directory and run cpphash/install.sh from the esphome project directory.

# To share cpphash and its esphome venv across multiple esphome project
# directories, clone it in a common location and run install.sh from that
# directory to set it up. Then, in each each project directory, copy
# this Makefile.esphome there and individually set CH_HOME
# to the common location where cpphash was installed

# CH_HOME:=/my/shared/cpphash

CH_HOME ?= ./cpphash

ifeq (,$(wildcard $(CH_HOME)/install.sh))
  $(info $(CH_HOME) not found. To install it, do this:)
  $(info   git clone https://github.com/maartenSXM/cpphash.git)
  $(info   ./cpphash/install.sh -y)
  $(info   source cpphash/Bashrc)
  $(error and try again)
endif

ifeq (,$(VIRTUAL_ENV))
  $(error $$VIRTUAL_ENV not set. Did you source cpphash/Bashrc?)
endif

MAKECMDGOALS ?= all
MAKE         := $(MAKE) --no-print-directory
MAKEFILE     := $(lastword $(MAKEFILE_LIST))
PRJ_DEFAULT  := esphome.yaml

include $(CH_HOME)/make/prjsave.mk

MY_PRJ_PATH = $(PRJ)
MY_PRJ_DIR  = $(patsubst %/,%,$(dir $(PRJ)))
MY_PROJECT  = $(basename $(notdir $(MY_PRJ_PATH)))

# CH_BUILD_DIR is where this projects is built. If changed, review
# the definition of MY_TOP below.  It declares the relative path to
# the esphome project directory from CH_BUILD_DIR. This is done manually
# because realpath does not support the --relative-to option on many
# non-Linux OSs.

CH_BUILD ?= build
CH_BUILD_DIR = $(CH_BUILD)/$(MY_PROJECT)

# include $(CH_HOME)/make/log.mk

# CH_GEN is the set of files that cpphash runs the C preprocessor on.
# They can include files from CH_SRCS (defined below) since the cpphash
# tool arranges that de-commented copies are included, not the originals.

CH_GEN  ?= $(PRJ)

# if there is a secrets.yaml beside $(PRJ), run it through cpp too
ifneq (,$(wildcard $(dir $(PRJ))secrets.yaml))
  CH_GEN += $(dir $(PRJ))secrets.yaml
endif

# Use this to list subdirectories to #include yaml files from.
MY_SRC_DIRS ?= 

# CH_SRCS is the set of files that cpphash will remove hash-style
# comments from while leaving any C preprocessor directives so that
# the file can subsequently be used as a #include by one of the
# CH_GEN files.

# Builds the list of CH_SRCS by looking for .yaml files in $(MY_DIRS).

CH_SRCS += $(sort $(foreach d,$(MY_SRC_DIRS),$(wildcard $(d)/*.yaml)) $(CH_GEN))

# In addition to updates to $(CH_SRCS) triggering a rebuild of espmake.yaml,
# updates to source files in $(ESP_DEPS) are also triggers.

MY_DEP_DIRS ?= 

ESP_DEPS += $(foreach d,$(MY_DEP_DIRS),$(wildcard $(d)/*.c) \
		$(wildcard $(d)/*.cpp) $(wildcard $(d)/*.h))

# If there is a secrets.h file in ./ or ../, use it

ifneq (,$(wildcard ./secrets.h))
  CH_EXTRA_FLAGS += -include ./secrets.h
else
  ifneq (,$(wildcard ../secrets.h))
    CH_EXTRA_FLAGS += -include ../secrets.h
  endif
endif

# Use this to list additional #include directories

# Allow #include from all source directories.  Note these
# directories come after -I build/<project>/dehashed so
# includes of yaml files are taken from there.

CH_EXTRA_INCS += $(foreach d,$(MY_SRC_DIRS),-I $(d))

# These #defines are for project adapation. 

# MY_TOP is how to get from the build directory back to
# the esphome project directory. It is relative from CH_BUILD_DIR.

CH_EXTRA_DEFS += -D MY_TOP=../..			\
		 -D MY_BUILD_PATH=$(CH_BUILD_DIR)	\
		 -D MY_PRJ_DIR=$(MY_PRJ_DIR)		\
		 -D MY_PROJECT_NAME=$(MY_PROJECT)	\
		 -D MY_PROJECT_$(MY_PROJECT)		\
		 -D MY_USER_NAME=$(USER)		\
		 -D MY_USER_$(USER)

ESP_INIT := $(PRJ)

# This includes the cpphash Makefile fragment that will dehash yamls files.
# In turn, it will include cpphash/esphome.mk which handles the esphome
# file generation and platformio build steps.

include $(CH_HOME)/make/cpphash.mk

print-config:: $(CH_TMP_DIR)/$(ESP_INIT)
	@printf "Makefile variables:\n"
	@printf "  MY_PROJECT: $(MY_PROJECT)\n"
	@printf "  CH_BUILD_DIR: $(CH_BUILD_DIR)\n"
	@printf "  ESP_INIT: $(ESP_INIT)\n"
	@printf "  CH_GEN:  $(CH_GEN)\n"
	@printf "  CH_SRCS:\n"
	@$(foreach f,$(CH_INFILES),printf "    $(f)\n";)
	@printf "  ESP_DEPS:\n"
	@$(foreach f,$(ESP_DEPS),printf "    $(f)\n";)
	@printf "Makefile #defines available to yaml files:"
	@printf "  $(subst -, ,$(subst -D,#define,$(CH_EXTRA_DEFS)))\n" | sed -e 's/ #/\n  #/g' -e 's/=/ /g'

.PHONY: print-config

